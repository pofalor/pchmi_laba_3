import sys
import os
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                               QHBoxLayout, QTreeView, QTextEdit, QLineEdit,
                               QPushButton, QLabel, QFileSystemModel,
                               QSplitter, QMessageBox, QMenu, QDialog,
                               QDialogButtonBox, QFormLayout, QListWidget,
                               QInputDialog, QFrame, QScrollArea, QGridLayout,
                               QCheckBox, QGraphicsDropShadowEffect)
from PySide6.QtGui import QAction, QFont, QIcon, QPixmap, QPainter, QColor
from PySide6.QtCore import Qt, QDir, QItemSelectionModel, QSize, QPropertyAnimation, QEasingCurve


class FileCard(QFrame):
    def __init__(self, name, path, is_dir, parent=None):
        super().__init__(parent)
        self.name = name
        self.path = path
        self.is_dir = is_dir
        self.setup_ui()

    def setup_ui(self):
        self.setFrameStyle(QFrame.Box)
        self.setLineWidth(1)
        self.setFixedSize(120, 100)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(QColor(0, 0, 0, 80))
        shadow.setOffset(2, 2)
        self.setGraphicsEffect(shadow)

        layout = QVBoxLayout(self)
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(5)
        layout.setContentsMargins(5, 5, 5, 5)

        # –ò–∫–æ–Ω–∫–∞ (—ç–º—É–ª—è—Ü–∏—è)
        icon_label = QLabel()
        icon_label.setFixedSize(48, 48)
        if self.is_dir:
            icon_label.setStyleSheet("""
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #4CAF50, stop:1 #388E3C);
                border-radius: 8px;
                color: white;
                font-weight: bold;
            """)
            icon_label.setText("üìÅ")
        else:
            icon_label.setStyleSheet("""
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #2196F3, stop:1 #1976D2);
                border-radius: 8px;
                color: white;
                font-weight: bold;
            """)
            icon_label.setText("üìÑ")
        icon_label.setAlignment(Qt.AlignCenter)

        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
        name_label = QLabel(self.name)
        name_label.setAlignment(Qt.AlignCenter)
        name_label.setWordWrap(True)
        name_label.setMaximumWidth(110)
        name_label.setStyleSheet("font-size: 11px;")

        layout.addWidget(icon_label)
        layout.addWidget(name_label)

        # –°—Ç–∏–ª—å –∫–∞—Ä—Ç–æ—á–∫–∏
        self.setStyleSheet("""
            FileCard {
                background: white;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
            }
            FileCard:hover {
                background: #f5f5f5;
                border: 1px solid #2196F3;
            }
        """)


class RenameDialog(QDialog):
    def __init__(self, current_name, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
        self.setModal(True)
        self.resize(300, 100)

        layout = QFormLayout(self)

        self.old_name_label = QLabel(current_name)
        self.new_name_input = QLineEdit(current_name)

        layout.addRow("–¢–µ–∫—É—â–µ–µ –∏–º—è:", self.old_name_label)
        layout.addRow("–ù–æ–≤–æ–µ –∏–º—è:", self.new_name_input)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)

        layout.addRow(buttons)

    def get_new_name(self):
        return self.new_name_input.text().strip()


class GroupRenameDialog(QDialog):
    def __init__(self, file_count, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ì—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        self.setModal(True)
        self.resize(400, 150)

        layout = QFormLayout(self)

        self.file_count_label = QLabel(f"–ë—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
        self.new_name_input = QLineEdit()
        self.new_name_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –±–∞–∑–æ–≤–æ–µ –∏–º—è")

        layout.addRow(self.file_count_label)
        layout.addRow("–ë–∞–∑–æ–≤–æ–µ –∏–º—è:", self.new_name_input)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)

        layout.addRow(buttons)

    def get_new_name(self):
        return self.new_name_input.text().strip()


class FileManagerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –ö–∞—Ä—Ç–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        self.resize(1200, 800)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        self.selected_cards = {}

        # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ main
        self.root_path = os.path.join(os.getcwd(), "main")
        os.makedirs(self.root_path, exist_ok=True)
        self.current_path = self.root_path

        self.setup_ui()
        self.setup_file_system()

    def setup_ui(self):
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        self.setup_top_panel(main_layout)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.setup_workspace(main_layout)

        # –ü–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥
        self.setup_command_panel(main_layout)

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.create_menu()

    def setup_top_panel(self, main_layout):
        top_frame = QFrame()
        top_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #2196F3, stop:1 #1976D2);
                border-radius: 8px;
                padding: 10px;
            }
        """)
        top_layout = QHBoxLayout(top_frame)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_layout = QHBoxLayout()

        self.home_button = QPushButton("üè† –ì–ª–∞–≤–Ω–∞—è")
        self.home_button.setFixedWidth(100)
        self.home_button.clicked.connect(self.go_home)

        self.up_button = QPushButton("‚¨ÜÔ∏è –ù–∞–≤–µ—Ä—Ö")
        self.up_button.setFixedWidth(100)
        self.up_button.clicked.connect(self.go_up)

        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_button.setFixedWidth(100)
        self.refresh_button.clicked.connect(self.refresh_view)

        nav_layout.addWidget(self.home_button)
        nav_layout.addWidget(self.up_button)
        nav_layout.addWidget(self.refresh_button)

        # –ü—É—Ç—å
        path_layout = QVBoxLayout()
        self.path_label = QLabel(f"–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {self.get_relative_path()}")
        self.path_label.setStyleSheet("color: white; font-weight: bold; font-size: 12px;")

        self.breadcrumb_label = QLabel(self.get_breadcrumb())
        self.breadcrumb_label.setStyleSheet("color: #E3F2FD; font-size: 10px;")

        path_layout.addWidget(self.path_label)
        path_layout.addWidget(self.breadcrumb_label)

        top_layout.addLayout(nav_layout)
        top_layout.addStretch()
        top_layout.addLayout(path_layout)

        main_layout.addWidget(top_frame)

    def setup_workspace(self, main_layout):
        workspace_splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (—Å–≤–µ—Ä–Ω—É—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.tree_panel = QWidget()
        tree_layout = QVBoxLayout(self.tree_panel)

        tree_header = QLabel("üå≥ –î–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫")
        tree_header.setStyleSheet("font-weight: bold; color: #1976D2;")
        tree_layout.addWidget(tree_header)

        self.tree_view = QTreeView()
        self.tree_view.setFont(QFont("Consolas", 9))
        self.tree_view.doubleClicked.connect(self.on_item_double_clicked)
        self.tree_view.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree_view.customContextMenuRequested.connect(self.show_context_menu)
        self.tree_view.setSelectionMode(QTreeView.ExtendedSelection)
        self.tree_view.setMaximumWidth(300)

        tree_layout.addWidget(self.tree_view)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
        central_panel = QWidget()
        central_layout = QVBoxLayout(central_panel)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
        card_tools_layout = QHBoxLayout()

        self.view_mode_button = QPushButton("üìã –°–ø–∏—Å–æ–∫")
        self.view_mode_button.setCheckable(True)
        self.view_mode_button.setFixedWidth(100)
        self.view_mode_button.clicked.connect(self.toggle_view_mode)

        self.select_all_checkbox = QCheckBox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        self.select_all_checkbox.stateChanged.connect(self.toggle_select_all)

        card_tools_layout.addWidget(self.view_mode_button)
        card_tools_layout.addStretch()
        card_tools_layout.addWidget(self.select_all_checkbox)

        central_layout.addLayout(card_tools_layout)

        # –û–±–ª–∞—Å—Ç—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        self.cards_scroll = QScrollArea()
        self.cards_widget = QWidget()
        self.cards_layout = QGridLayout(self.cards_widget)
        self.cards_layout.setSpacing(10)
        self.cards_layout.setAlignment(Qt.AlignTop)

        self.cards_scroll.setWidget(self.cards_widget)
        self.cards_scroll.setWidgetResizable(True)
        self.cards_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        central_layout.addWidget(self.cards_scroll)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_panel = QFrame()
        info_panel.setFrameStyle(QFrame.Box)
        info_panel.setStyleSheet("""
            QFrame {
                background: #FAFAFA;
                border: 1px solid #E0E0E0;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        info_layout = QVBoxLayout(info_panel)

        info_header = QLabel("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_header.setStyleSheet("font-weight: bold; color: #1976D2; font-size: 14px;")
        info_layout.addWidget(info_header)

        self.info_text = QTextEdit()
        self.info_text.setFont(QFont("Consolas", 10))
        self.info_text.setReadOnly(True)
        self.info_text.setMaximumWidth(350)

        info_layout.addWidget(self.info_text)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ splitter
        workspace_splitter.addWidget(self.tree_panel)
        workspace_splitter.addWidget(central_panel)
        workspace_splitter.addWidget(info_panel)

        # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–¥–µ—Ä–µ–≤–æ —Å–≤–µ—Ä–Ω—É—Ç–æ)
        workspace_splitter.setSizes([100, 700, 400])

        main_layout.addWidget(workspace_splitter)

    def setup_command_panel(self, main_layout):
        command_frame = QFrame()
        command_frame.setStyleSheet("""
            QFrame {
                background: #F5F5F5;
                border: 1px solid #E0E0E0;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        command_layout = QHBoxLayout(command_frame)

        command_layout.addWidget(QLabel("üíª –ö–æ–º–∞–Ω–¥–∞:"))

        self.command_input = QLineEdit()
        self.command_input.setFont(QFont("Consolas", 10))
        self.command_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–ø–æ–º–æ—â—å - –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥)")
        self.command_input.returnPressed.connect(self.execute_command)

        self.execute_button = QPushButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å")
        self.execute_button.clicked.connect(self.execute_command)
        self.execute_button.setFixedWidth(100)
        self.execute_button.setStyleSheet("""
            QPushButton {
                background: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 5px;
            }
            QPushButton:hover {
                background: #45a049;
            }
        """)

        command_layout.addWidget(self.command_input)
        command_layout.addWidget(self.execute_button)

        main_layout.addWidget(command_frame)

    def create_menu(self):
        menubar = self.menuBar()

        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu("–§–∞–π–ª")

        new_folder_action = QAction("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", self)
        new_folder_action.triggered.connect(self.create_new_folder)
        file_menu.addAction(new_folder_action)

        group_rename_action = QAction("üîÑ –ì—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", self)
        group_rename_action.triggered.connect(self.group_rename_selected)
        file_menu.addAction(group_rename_action)

        file_menu.addSeparator()

        refresh_action = QAction("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self)
        refresh_action.triggered.connect(self.refresh_view)
        file_menu.addAction(refresh_action)

        exit_action = QAction("üö™ –í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é –í–∏–¥
        view_menu = menubar.addMenu("–í–∏–¥")

        toggle_tree_action = QAction("üå≥ –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –¥–µ—Ä–µ–≤–æ", self)
        toggle_tree_action.triggered.connect(self.toggle_tree_view)
        view_menu.addAction(toggle_tree_action)

        # –ú–µ–Ω—é –ü–æ–º–æ—â—å
        help_menu = menubar.addMenu("–ü–æ–º–æ—â—å")

        help_action = QAction("‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", self)
        help_action.triggered.connect(self.show_help)
        help_menu.addAction(help_action)

    def setup_file_system(self):
        # –ú–æ–¥–µ–ª—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.model = QFileSystemModel()
        self.model.setRootPath(self.root_path)
        self.model.setNameFilters([])
        self.model.setNameFilterDisables(False)

        self.tree_view.setModel(self.model)
        self.tree_view.setRootIndex(self.model.index(self.root_path))
        self.tree_view.hideColumn(1)
        self.tree_view.hideColumn(2)
        self.tree_view.hideColumn(3)

        self.update_info()
        self.update_cards_view()

    def get_relative_path(self):
        rel_path = os.path.relpath(self.current_path, start=self.root_path)
        return rel_path if rel_path != "." else "main"

    def get_breadcrumb(self):
        rel_path = self.get_relative_path()
        parts = rel_path.split(os.sep)
        return " > ".join(parts)

    def update_info(self):
        self.path_label.setText(f"–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {self.get_relative_path()}")
        self.breadcrumb_label.setText(self.get_breadcrumb())
        self.show_dir_info()

    def show_dir_info(self):
        rel = self.get_relative_path()
        info_text = f"üìÇ <b>–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:</b> {rel}\n\n"

        try:
            entries = os.listdir(self.current_path)
            dirs = [e for e in entries if os.path.isdir(os.path.join(self.current_path, e))]
            files = [e for e in entries if os.path.isfile(os.path.join(self.current_path, e))]

            info_text += f"üìÅ <b>–ü–∞–ø–∫–∏:</b> {len(dirs)}\n"
            info_text += f"üìÑ <b>–§–∞–π–ª—ã:</b> {len(files)}\n\n"

            if files:
                total_size = 0
                for f in files:
                    file_path = os.path.join(self.current_path, f)
                    total_size += os.path.getsize(file_path)
                info_text += f"üìä <b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤:</b> {total_size} –±–∞–π—Ç\n"

        except PermissionError:
            info_text += "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ</b>"

        self.info_text.setText(info_text)

    def update_cards_view(self):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for i in reversed(range(self.cards_layout.count())):
            widget = self.cards_layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        self.selected_cards.clear()

        try:
            entries = os.listdir(self.current_path)
            entries.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            row, col = 0, 0
            max_cols = 6  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ

            for entry in entries:
                entry_path = os.path.join(self.current_path, entry)
                is_dir = os.path.isdir(entry_path)

                card = FileCard(entry, entry_path, is_dir)
                card.mousePressEvent = lambda event, c=card: self.on_card_clicked(c, event)
                card.mouseDoubleClickEvent = lambda event, p=entry_path: self.on_card_double_clicked(p, event)

                self.cards_layout.addWidget(card, row, col)
                col += 1
                if col >= max_cols:
                    col = 0
                    row += 1

        except PermissionError:
            error_label = QLabel("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ")
            error_label.setStyleSheet("color: red; font-size: 16px;")
            self.cards_layout.addWidget(error_label, 0, 0)

    def on_card_clicked(self, card, event):
        if event.button() == Qt.LeftButton:
            # Ctrl –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            if event.modifiers() & Qt.ControlModifier:
                if card.path in self.selected_cards:
                    self.deselect_card(card)
                else:
                    self.select_card(card)
            else:
                # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
                self.clear_selection()
                self.select_card(card)

    def on_card_double_clicked(self, path, event):
        if os.path.isdir(path):
            self.open_directory(path)

    def select_card(self, card):
        card.setStyleSheet("""
            FileCard {
                background: #E3F2FD;
                border: 2px solid #2196F3;
                border-radius: 8px;
            }
        """)
        self.selected_cards[card.path] = card

    def deselect_card(self, card):
        card.setStyleSheet("""
            FileCard {
                background: white;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
            }
            FileCard:hover {
                background: #f5f5f5;
                border: 1px solid #2196F3;
            }
        """)
        if card.path in self.selected_cards:
            del self.selected_cards[card.path]

    def clear_selection(self):
        for card in list(self.selected_cards.values()):
            self.deselect_card(card)
        self.selected_cards.clear()

    def toggle_select_all(self, state):
        if state == Qt.Checked:
            self.clear_selection()
            for i in range(self.cards_layout.count()):
                widget = self.cards_layout.itemAt(i).widget()
                if isinstance(widget, FileCard):
                    self.select_card(widget)
        else:
            self.clear_selection()

    def toggle_view_mode(self):
        if self.view_mode_button.isChecked():
            self.view_mode_button.setText("üÉè –ö–∞—Ä—Ç–æ—á–∫–∏")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º —Å–ø–∏—Å–∫–∞
        else:
            self.view_mode_button.setText("üìã –°–ø–∏—Å–æ–∫")
            self.update_cards_view()

    def toggle_tree_view(self):
        if self.tree_panel.isVisible():
            self.tree_panel.hide()
        else:
            self.tree_panel.show()

    def go_home(self):
        self.current_path = self.root_path
        self.tree_view.setRootIndex(self.model.index(self.current_path))
        self.update_info()
        self.update_cards_view()

    def go_up(self):
        parent = os.path.dirname(self.current_path)
        if os.path.commonpath([parent, self.root_path]) != self.root_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è –ø–æ–¥–Ω—è—Ç—å—Å—è –≤—ã—à–µ 'main'.")
        elif parent == self.current_path:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã —É–∂–µ –≤ –∫–æ—Ä–Ω–µ –¥–µ—Ä–µ–≤–∞.")
        else:
            self.current_path = parent
            self.tree_view.setRootIndex(self.model.index(self.current_path))
            self.update_info()
            self.update_cards_view()

    def on_item_double_clicked(self, index):
        path = self.model.filePath(index)
        if os.path.isdir(path):
            self.open_directory(path)

    def show_context_menu(self, position):
        index = self.tree_view.indexAt(position)
        if not index.isValid():
            return

        path = self.model.filePath(index)
        menu = QMenu(self)

        if os.path.isdir(path):
            rename_action = QAction("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", self)
            rename_action.triggered.connect(lambda: self.rename_item(path))
            menu.addAction(rename_action)

            open_action = QAction("–û—Ç–∫—Ä—ã—Ç—å", self)
            open_action.triggered.connect(lambda: self.open_directory(path))
            menu.addAction(open_action)
        else:
            rename_action = QAction("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª", self)
            rename_action.triggered.connect(lambda: self.rename_item(path))
            menu.addAction(rename_action)

        selected_indexes = self.tree_view.selectionModel().selectedIndexes()
        if len(selected_indexes) > 1:
            group_rename_action = QAction("–ì—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö", self)
            group_rename_action.triggered.connect(self.group_rename_selected)
            menu.addAction(group_rename_action)

        menu.exec_(self.tree_view.viewport().mapToGlobal(position))

    def rename_item(self, path):
        current_name = os.path.basename(path)
        dialog = RenameDialog(current_name, self)
        if dialog.exec_() == QDialog.Accepted:
            new_name = dialog.get_new_name()
            if new_name and new_name != current_name:
                try:
                    new_path = os.path.join(os.path.dirname(path), new_name)
                    os.rename(path, new_path)
                    self.refresh_view()
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤: {new_name}")
                except Exception as e:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å: {e}")

    def group_rename_selected(self):
        """–ì—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not self.selected_cards:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            selected_indexes = self.tree_view.selectionModel().selectedIndexes()
            file_paths = []
            for index in selected_indexes:
                if index.column() == 0:
                    path = self.model.filePath(index)
                    if os.path.isfile(path):
                        file_paths.append(path)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            file_paths = [path for path in self.selected_cards.keys()
                          if os.path.isfile(path)]

        if not file_paths:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
            return

        file_paths.sort()
        dialog = GroupRenameDialog(len(file_paths), self)
        if dialog.exec_() == QDialog.Accepted:
            new_base_name = dialog.get_new_name()
            if not new_base_name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤–æ–µ –∏–º—è.")
                return

            self.perform_group_rename(file_paths, new_base_name)

    def perform_group_rename(self, file_paths, new_base_name):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        success_count = 0
        warning_messages = []

        for i, old_path in enumerate(file_paths, 1):
            if not os.path.exists(old_path):
                warning_messages.append(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(old_path)}")
                continue

            _, ext = os.path.splitext(old_path)
            new_name = f"{new_base_name}_{i}{ext}"
            new_path = os.path.join(os.path.dirname(old_path), new_name)

            try:
                os.rename(old_path, new_path)
                success_count += 1
            except Exception as e:
                warning_messages.append(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {os.path.basename(old_path)}: {e}")

        result_message = f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤"
        if warning_messages:
            result_message += f"\n\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n" + "\n".join(warning_messages)

        QMessageBox.information(self, "–†–µ–∑—É–ª—å—Ç–∞—Ç", result_message)
        self.refresh_view()

    def open_directory(self, path):
        self.current_path = path
        self.tree_view.setRootIndex(self.model.index(path))
        self.update_info()
        self.update_cards_view()

    def create_new_folder(self):
        name, ok = QInputDialog.getText(self, "–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏:")
        if ok and name:
            try:
                new_folder_path = os.path.join(self.current_path, name)
                os.makedirs(new_folder_path, exist_ok=True)
                self.refresh_view()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü–∞–ø–∫–∞ '{name}' —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {e}")

    def refresh_view(self):
        self.model.setRootPath(self.root_path)
        self.tree_view.setRootIndex(self.model.index(self.current_path))
        self.update_info()
        self.update_cards_view()
        self.clear_selection()
        self.select_all_checkbox.setCheckState(Qt.Unchecked)

    def execute_command(self):
        command = self.command_input.text().strip()
        if not command:
            return

        self.command_input.clear()
        self.info_text.append(f"> {command}")

        parts = command.split()
        cmd = parts[0].lower() if parts else ""

        try:
            if cmd == "–≤—ã—Ö–æ–¥":
                self.close()

            elif cmd == "–Ω–¥":
                self.go_up()

            elif cmd == "–≤–¥":
                if len(parts) < 2:
                    self.info_text.append("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏.")
                    return

                target = os.path.join(self.current_path, parts[1])
                if os.path.isdir(target):
                    self.open_directory(target)
                else:
                    self.info_text.append("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            elif cmd == "–∏–º—è":
                if len(parts) < 3:
                    self.info_text.append("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∏–º—è <—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ>")
                    return

                old_name = os.path.join(self.current_path, parts[1])
                new_name_full = ' '.join(parts[2:])
                new_name = os.path.join(self.current_path, new_name_full)

                if not os.path.exists(old_name):
                    self.info_text.append("‚ùå –§–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return

                os.rename(old_name, new_name)
                self.info_text.append(f"‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {parts[1]} ‚Üí {new_name_full}")
                self.refresh_view()

            elif cmd == "–∏–º—è–≥—Ä":
                if len(parts) < 3:
                    self.info_text.append("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∏–º—è–≥—Ä <–Ω–æ–≤–æ–µ> <–∏–º—è1> <–∏–º—è2> <–∏–º—è3> ...")
                    return

                new_base_name = parts[1]
                file_names = parts[2:]

                self.execute_group_rename_command(new_base_name, file_names)

            elif cmd == "–∏–Ω—Ñ–æ":
                self.show_dir_info()

            elif cmd == "–ø–æ–º–æ—â—å":
                self.show_help()

            else:
                self.info_text.append("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                self.show_help()

        except Exception as e:
            self.info_text.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    def execute_group_rename_command(self, new_base_name, file_names):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        success_count = 0
        warning_messages = []

        for i, file_name in enumerate(file_names, 1):
            old_path = os.path.join(self.current_path, file_name)

            if not os.path.exists(old_path):
                warning_messages.append(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_name}")
                continue

            _, ext = os.path.splitext(old_path)
            new_name = f"{new_base_name}_{i}{ext}"
            new_path = os.path.join(self.current_path, new_name)

            try:
                os.rename(old_path, new_path)
                success_count += 1
                self.info_text.append(f"‚úÖ {file_name} ‚Üí {new_name}")
            except Exception as e:
                warning_messages.append(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {file_name}: {e}")

        for warning in warning_messages:
            self.info_text.append(f"‚ö†Ô∏è {warning}")

        if success_count > 0:
            self.info_text.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤")

        self.refresh_view()

    def show_help(self):
        help_text = """
üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

  <b>–ù–¥</b> - –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö
  <b>–í–¥</b> <–ø–∞–ø–∫–∞> - –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–ø–∞–ø–∫—É
  <b>–∏–º—è</b> <—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ> - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É
  <b>–∏–º—è–≥—Ä</b> <–Ω–æ–≤–æ–µ> <–∏–º—è1> <–∏–º—è2> ... - –≥—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  <b>–∏–Ω—Ñ–æ</b> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
  <b>–ø–æ–º–æ—â—å</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  <b>–≤—ã—Ö–æ–¥</b> - –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
- –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –ø–∞–ø–∫–µ/–∫–∞—Ä—Ç–æ—á–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ—ë
- –í—ã–¥–µ–ª—è–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é Ctrl+–∫–ª–∏–∫
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –î–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫ –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é "–í–∏–¥"
- –ö–∞—Ä—Ç–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–æ—â–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
"""
        self.info_text.setText(help_text)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle('Fusion')

    window = FileManagerApp()
    window.show()

    sys.exit(app.exec())